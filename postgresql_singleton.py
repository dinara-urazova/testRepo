import pg8000.native


class PostgreSQLSingleton:
    _connection = None  # статический атрибут класса (будет общим для всех экземпляров класса), хранит единств экземпляр соединения с БД. Изначально None

    """
    Ссылка на класс: Когда метод getConnection вызывается, cls ссылается на сам класс SQLiteSingleton, а не на его экземпляр. Это позволяет вам обращаться к статическим атрибутам класса, таким как _connection, без необходимости создавать экземпляр класса.

    Доступ к статическим атрибутам: Внутри метода getConnection, вы проверяете, является ли cls._connection равным None. Если это так, вы создаете новое соединение с БД и присваиваете его статическому атрибуту _connection. 
    
    Если соединение уже существует (то есть _connection не равно None), метод просто возвращает уже существующее соединение. Это гарантирует, что только одно соединение будет создано и использовано всеми экземплярами класса.

    Глобальная точка доступа: Поскольку метод getConnection является методом класса, его можно вызывать без создания экземпляра класса. Это позволяет вам получать доступ к соединению с БД напрямую через класс, что соответствует концепции Singleton — предоставлять глобальную точку доступа к единственному экземпляру.

    Использование cls в методе getConnection позволяет вам управлять статическим атрибутом _connection на уровне класса, что и обеспечивает реализацию паттерна Singleton. Это гарантирует, что независимо от того, сколько экземпляров класса SQLiteSingleton вы создадите, все они будут использовать одно и то же соединение с базой данных.

    Паттерн Singleton (одиночка) — это структурный паттерн проектирования, который гарантирует, что класс имеет только один экземпляр и предоставляет глобальную точку доступа к этому экземпляру. Основные аспекты паттерна Singleton:

    1) Единственный экземпляр: Паттерн обеспечивает создание только одного экземпляра класса. Ваша программа может использовать только одно соединение с базой данных в любой момент времени. 

    2) Глобальная точка доступа: Singleton предоставляет статический метод, который позволяет получить доступ к единственному экземпляру класса. Это позволяет другим частям программы использовать этот экземпляр без необходимости создавать новые.

    Метод getConnection() проверяет, существует ли уже экземпляр соединения. Если _connection равен None, он создает новое соединение и сохраняет его в _connection. Если экземпляр уже существует, метод просто возвращает его.

    3) Ленивая инициализация: Соединение с базой данных создается только при первом вызове метода getConnection(). Это позволяет экономить ресурсы, если экземпляр не будет использован.

    4) Потокобезопасность: В многопоточных приложениях важно обеспечить, чтобы экземпляр создавался только один раз, даже если несколько потоков пытаются получить доступ к нему одновременно. Для этого могут использоваться различные механизмы синхронизации. Пример использования паттерна Singleton может быть в управлении соединением с базой данных, как в вашем коде. Это позволяет избежать создания нескольких соединений и обеспечивает централизованный доступ к базе данных, что делает приложение более эффективным и управляемым.

    """

    @classmethod  # метод класса, cls (класс)  аналог self(экз)
    def getConnection(cls):  # cls ссылается на класс SQLiteSingleton 
        if cls._connection is None:
            cls._connection = pg8000.native.Connection("dinaraurazova")
        return cls._connection